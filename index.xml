<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overlord</title><link>https://bbva.github.io/Overlord/</link><description>Recent content on Overlord</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><lastBuildDate>Fri, 05 Nov 2021 12:34:46 +0100</lastBuildDate><atom:link href="https://bbva.github.io/Overlord/index.xml" rel="self" type="application/rss+xml"/><item><title>Creador de Reglas</title><link>https://bbva.github.io/Overlord/overview/actors/ruler/</link><pubDate>Fri, 05 Nov 2021 12:34:46 +0100</pubDate><guid>https://bbva.github.io/Overlord/overview/actors/ruler/</guid><description>El proceso de creación de reglas para Overlord es bastante sencillo, pero requiere de entendimiento del DSL específico para reglas. El creador de Reglas es aquel usuario de Overlord que entiende los problemas de seguridad y quiere aportar valor diseñando tests genéricos sobre controles (qué hay que verificar).
En este caso, la comunidad será su principal objetivo, ya que la creación de reglas aporta valor dentro de la misma en forma de consolidación de cómo reconocer que un control está efectivamente funcionando tal como se diseñó, y que tanto el test genérico como la adaptación para un entorno específico pueda ser compartido y contrastado con el resto de la industria facilitando la discusión sobre algo tangible</description></item><item><title>Security Risk Manager</title><link>https://bbva.github.io/Overlord/overview/actors/srm/</link><pubDate>Wed, 03 Nov 2021 11:40:50 +0100</pubDate><guid>https://bbva.github.io/Overlord/overview/actors/srm/</guid><description>El Security Risk Manager se centra en el modelado de amenazas, los riesgos y los controles para mitigarlos. Sin embargo suele perder la última milla de verificación de que los controles que especificó están o no operativos, sobre todo en entornos de de Despliegue Contínuo e Infrastructure as Code, por lo que Overlord debería ser una de las herramientas que más valor le puede aportar.
El tener visión de todos los controles de forma transversal a la compañía es una tarea abordada por software de gestión de riesgos (ASR&amp;amp;TM: Application Security Requirements and Threat Modeling o GRC/IRM).</description></item><item><title>Programmer</title><link>https://bbva.github.io/Overlord/overview/actors/programmer/</link><pubDate>Fri, 29 Oct 2021 11:52:55 +0200</pubDate><guid>https://bbva.github.io/Overlord/overview/actors/programmer/</guid><description>Desde la perspectiva de un programador la idea de herramienta universal puede sonar disparatada. Estamos acostumbrados a enfrentarnos al software como un todo que debe resolver el problema; aunque los microservicios estén cambiando esta tendencia poco a poco.
Pero la búsqueda automática de caminos e información auxiliar que necesita Overlord para que pueda desarrollarse de manera independiente no es algo que se pueda &amp;ldquo;resolver&amp;rdquo; globalmente. Necesitamos una aproximación inteligente, modular y extensible.</description></item><item><title>Examples</title><link>https://bbva.github.io/Overlord/dronetown/examples/</link><pubDate>Thu, 28 Oct 2021 10:11:57 +0200</pubDate><guid>https://bbva.github.io/Overlord/dronetown/examples/</guid><description/></item><item><title>Proc</title><link>https://bbva.github.io/Overlord/dronetown/proc/</link><pubDate>Thu, 28 Oct 2021 10:11:50 +0200</pubDate><guid>https://bbva.github.io/Overlord/dronetown/proc/</guid><description/></item><item><title>Agents</title><link>https://bbva.github.io/Overlord/dronetown/agents/</link><pubDate>Thu, 28 Oct 2021 10:11:42 +0200</pubDate><guid>https://bbva.github.io/Overlord/dronetown/agents/</guid><description/></item><item><title>Rules</title><link>https://bbva.github.io/Overlord/overview/rules/</link><pubDate>Tue, 26 Oct 2021 12:14:39 +0200</pubDate><guid>https://bbva.github.io/Overlord/overview/rules/</guid><description>En el caso de la ejecución de una regla completa podemos ver el proceso de abstracción completo desde la regla más general, llegando a un trozo de código ejecutado.
Este es un ejemplo sencillo y puntual, se reserva para otras ejemplos una regla fallida, una regla incompleta y otros escenario secundarios. Actualmente la PoC de Overlord está centrada en la viabilidad por lo que se ciñe a los &amp;ldquo;Happy Path&amp;rdquo;.</description></item></channel></rss>